doctype html
html(lang="en")
  head
    title=title
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no")
    
    link(rel='stylesheet', href="/bootstrap.min.css")
    link(rel='stylesheet', href="/all.css")
    link(rel='stylesheet', href='/stylesheets/style.css')
    
    script(src="/jquery-3.3.1.min.js")
    script(src="/web3.js")
    script(src="/vue.js")

    script.
      var web3;
      web3 = new Web3(new Web3.providers.HttpProvider("#{env.GDTU_RPC_URL}"));

      
  body
    div.navbar-dark.bg-dark.fixed-top
      nav.navbar.navbar-expand-md.menu-box
        img(src="/logo.png" width="35" style="margin-right:10px;")
        a.navbar-brand.text-uppercase(href="/") GDTU区块浏览器
        button.navbar-toggler(type="button", data-toggle="collapse", data-target="#navbarsDefault", aria-controls="navbarsDefault", aria-expanded="false", aria-label="Toggle navigation")
          span.navbar-toggler-icon

        div.collapse.navbar-collapse#navbarsDefault
          ul.navbar-nav.mr-auto
            li.nav-item
              a.nav-link(href="/") 首页
                span.sr-only (current)
            li.nav-item
              a.nav-link(href="/blockList/1") 所有区块
            li.nav-item
              a.nav-link(href="/transactionsList/1") 交易记录
            li.nav-item
              a.nav-link(href="/accountsList/1") 账户持仓
            li.nav-item
              a.nav-link(href="/tokensList/1") 所有代币
            li.nav-item
              a.nav-link(href="/watch") 观察钱包

          form.form-inline.my-2.my-lg-0#searchForm
            input.form-control.mr-sm-2(type="search", name="search", size="50", placeholder="账户、交易hash、代币名称", aria-label="Search", required, autofocus)
            button.btn.btn-outline-success.my-2.my-sm-0(type="submit") 搜索

    main.container(role="main")
      block contents


    script(src="/popper.min.js", integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49", crossorigin="anonymous")
    script(src="/bootstrap.min.js", integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T", crossorigin="anonymous")
    script.

      var blockNumber = 0;

      function getBlockNumber() {
        return new Promise((res, rej) => {
          web3.gdtu.getBlockNumber((error, result) => {
            blockNumber = result;
            console.log("blockNumber=", blockNumber);
          });
        });
      }

      $("#navbarsDefault a").each(function(i, e){
        if( location.href == e.href ) {
          e.closest("li.nav-item").classList.add("active");
        }
      });

      // search form
      $('#searchForm').submit(function(evt) {
        evt.preventDefault();
        var search = evt.target.search.value;
        //- console.log(search, ", ", search.length);

        //- search = search.split('gd').join('');
        //- var regexpTx = /[0-9a-zA-Z]{64}?/;
        //- //var regexpAddr =  /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}/; // TODO ADDR REGEX or use isAddress(hexString) API ?
        //- var regexpAddr = /^(gd)?[0-9a-f]{40}$/; //New GDTU Regular Expression for Addresses
        //- var regexpBlock = /[0-9]{1,7}?/;
        //- var result =regexpTx.test(search);

        if( search.length === 66 ) { //tx hash
          location.href = '/tx/' + search;
        } else if( search.length === 42 && web3.isAddress(search) ) {
          location.href = '/address/' + search + '/1/';
        } else if( search <= blockNumber ) {
          location.href = '/block/' + search;
        } else {
          console.log('what?');
        }      
        
      });


      Date.prototype.Format = function (fmt) {
        var o = {
          "M+": this.getMonth() + 1,
          "d+": this.getDate(),
          "h+": this.getHours(),
          "m+": this.getMinutes(),
          "s+": this.getSeconds(),
          "q+": Math.floor((this.getMonth() + 3) / 3),
          "S": this.getMilliseconds()
        };
        if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o)
          if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        return fmt;
      }
