extends layout/default_layout

block contents
  //- h1= title

  div#app

    table.table._table-striped.table-bordered._table-dark.w-100
      thead.thead-light
        tr
          th(width="12%") 当前区块
          th(width="10%") API版本
          th(width="*") 客户端/节点版本
          th(width="24%") 最近10个区块平均出块时间
          th(width="14%") 当前燃料价格
          //th(width="14%") 算力
      tr
        td
          a(v-bind:href="'/block/' + blockNumber") {{ blockNumber }}
        td {{ api }}
        td {{ node }}
        td {{ average }} s
        td {{ gasPrice }}
        //td {{ hashrate }}

    //- h4 Latest Block: 
      a(v-bind:href="'/block/' + blockNumber") {{ blockNumber }}

    //- ========================
    //- Recent Blocks
    //- ========================
    h1
      span.ml-1 最近区块

    table.table.table-striped._table-bordered._table-dark.w-100
      thead._thead-light
        tr
          th 高度 #
          th # 区块Hash / 矿工
          th 燃料使用 / 燃料上限
          th 难度
          th 时间
      tbody
      tr(v-if="blocks.length === 0")
        td(colspan="6")
          div(style="text-align:center") loading...
      tr(v-for="block in blocks", v-if="blocks.length > 0")
        td
          a(v-bind:href="'/block/' + Number(block.number.replace('gd','0x')).toString(10)") {{ Number(block.number.replace('gd','0x')).toString(10) }}
        td
          div
            a(v-bind:href="'/block/' + block.hash.toString(10)") {{ block.hash }}
          div
            span(style="padding-right:5px;color:#777;") 出块者
            a(v-bind:href="'/address/' + block.miner.toString(10)+ '/1/'") {{ block.miner }}
            //span {{ Number(block.value.replace('gd','0x')).toString(10) }}
        td {{ Number(block.gasUsed.replace('gd','0x')).toString(10) }} / {{ Number(block.gasLimit.replace('gd','0x')).toString(10) }}
        td {{ Number(block.difficulty.replace('gd','0x')).toString(10) }}
        td {{ new Date(block.timestamp * 1000).Format("yyyy/MM/dd hh:mm:ss") }}

    //- ========================
    //- Recent Transactions
    //- ========================
    h1
      span.ml-1 最近交易

    table.table.table-striped._table-bordered._table-dark.w-100
      thead._thead-light
        tr
          th 交易Hash
          th 区块高度
          th 交易数量
          th 发送方
          th 接收方
          th 燃料使用
          th 燃料价格
          th 交易费用
      tbody
        tr(v-if="txs.length === 0")
          td(colspan="8")
            div(style="text-align:center") loading...
        tr(v-for="tx in txs", v-if="txs.length > 0")
          td
            a.d-inline-block.text-truncate(v-bind:href="'/tx/' + tx.hash", style="max-width:200px") {{ tx.hash }}
          td
            a(v-bind:href="'/block/' + Number(tx.blockNumber.replace('gd','0x')).toString(10)") {{ Number(tx.blockNumber.replace('gd','0x')).toString(10) }}
          td {{ web3.fromWei(tx.value, 'gdtuer').toString(10) + ' GDTU' }}
          td
            a.d-inline-block.text-truncate(v-bind:href="'/address/' + tx.from+ '/1/'", style="max-width:150px") {{ tx.from }}
          td
            span(v-if="tx.to === '0x0'") {{ tx.to }}
            a.d-inline-block.text-truncate(v-if="tx.to !== '0x0'", v-bind:href="'/address/' + tx.to+ '/1/'", style="max-width:150px") {{ tx.to }}
          td {{ Number(tx.gas.replace('gd','0x')).toString(10) }}
          td {{ web3.fromWei(tx.gasPrice, 'gdtuer').toString(10) + ' GDTU' }}
          td {{ web3.fromWei((tx.gas * tx.gasPrice), 'gdtuer').toString(10) + ' GDTU' }}

  script.

    var app = new Vue({
      el: '#app',
      data: {
        api: null,
        node: null,
        average: '--',
        gasPrice: null,
        hashrate: null,
        blockNumber: null,
        blocks: [],
        txs:[]
      },
      created: function() {
        init.bind(this)();
      }
    });

    function getNetwork() {
      return new Promise((res, rej) => {
        web3.version.getNetwork((error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getNode() {
      return new Promise((res, rej) => {
        web3.version.getNode((error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getPeerCount() {
      return new Promise((res, rej) => {
        web3.net.getPeerCount((error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getHashrate() {
      return new Promise((res, rej) => {
        web3.gdtu.getHashrate((error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getBlockNumber() {
      return new Promise((res, rej) => {
        web3.gdtu.getBlockNumber((error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getGasPrice(hashStringOrBlockNumber) {
      return new Promise((res, rej) => {
        web3.gdtu.getGasPrice((error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getTransaction(hash) {
      return new Promise((res, rej) => {
        web3.gdtu.getTransaction(hash, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    async function getRecentBlocks(self) {
      $.ajax({
        url: "#{env.GDTU_RPC_URL}/api/v1/block/list",
        type: "POST",
        data: {
          "page_no": 1,
          "page_size": 10
        },
        success: function (data) {
          self.blocks = data.data.list;
          self.blockNumber = Number(self.blocks[0].number.replace('gd','0x')).toString(10);
          self.average = getRecentBlocksAverageTime(self.blocks);
        },
        fail: function (err) {
          console.log(err);
        }
      });
    }

    function getRecentBlocksAverageTime(data){
      var result = 0;
      var t = 0;
      for(var i=0;i<10;i++){
         if(i>=1) t += Number(data[i-1].timestamp) - Number(data[i].timestamp);
      }
      result = parseInt(t/9);
      return result;
    }

    async function getRecentTransactions(self){
      $.ajax({
        url: "#{env.GDTU_RPC_URL}/api/v1/transactions/list",
        type: "POST",
        data: {
          "page_no": 1,
          "page_size": 10
        },
        success: function (data) {
          self.txs = data.data.list;
        },
        fail: function (err) {
          console.log(err);
        }
      });
    }

    // init Function
    async function init() {
      var self = app || this;

      //- getNode().then(r=>console.log(r));
      self.api = web3.version.api;
      getNode().then(r =>  self.node = r);
      getHashrate().then(r =>  self.hashrate = r);
      //- getGasPrice().then(r =>  self.gasPrice = r.toString(10) + ' (' +  web3.fromWei(r, 'gdtuer').toString(10) + ' GDTU)');
      getGasPrice().then(r =>  self.gasPrice = r.toString(10) + ' (' +  web3.fromWei(r, 'gwei').toString(10) + ' Gwei)');

      var blockNumber = await getBlockNumber();
      self.blockNumber = blockNumber;

      getRecentBlocks(self);
      setInterval(function (){
        getRecentBlocks(self);
      },3000);

      getRecentTransactions(self);
      setInterval(function () {
        getRecentTransactions(self);
      }, 3000);

    }
