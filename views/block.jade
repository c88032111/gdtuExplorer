extends layout/default_layout

block contents
  h1=title
    span.text-muted.ml-2.cici-title ##{number}

  div#app(v-cloak)

    //- ========================
    //- Block
    //- ========================
    table.table.table-striped
      tr
        td.w-25 区块高度
        td {{ block.number }}
      tr
        td 时间
        td {{ new Date(block.timestamp * 1000).Format("yyyy/MM/dd hh:mm:ss") }}
      tr
        td 交易数量
        td {{ block.transactions.length }} transactions
      tr
        td 区块哈希
        td {{ (block.hash || 'pending') }}
      tr
        td 上一个区块哈希
        td {{ block.parentHash }}
      tr
        td 叔块
        td {{ block.sha3Uncles }}
      tr
        td 出块者
        td
          span(v-if="block.miner === undefined") pending
          a(v-if="block.miner !== undefined", v-bind:href="'/address/' +  block.miner") {{  block.miner }}
      tr
        td 难度
        td {{ block.difficulty }}
      tr
        td 累计难度
        td {{ block.totalDifficulty }}
      tr
        td 尺寸
        td {{ block.size }} bytes
      tr
        td 燃料使用
        td {{ block.gasUsed }}
      tr
        td 燃料限制
        td {{ block.gasLimit }}
      tr
        td 随机数
        td {{ block.nonce }}
      tr
        td 额外数据
        td {{ block.extraData }}
      tr
        td 额外数据 (交易)
        td {{ web3.toAscii(block.extraData) }}
      tr
        td logsBloom
        td
          textarea(disabled, readonly, rows="3") {{ block.logsBloom }}
      tr
        td mixHash
        td {{ block.mixHash }}
      tr
        td receiptsRoot
        td {{ block.receiptsRoot }}
      tr
        td stateRoot
        td {{ block.stateRoot }}
      tr
        td transactionsRoot
        td {{ block.transactionsRoot }}
      tr
        td 叔块
        td {{ block.uncles }}

    //- ========================
    //- Transactions
    //- ========================
    h2 交易明细
    table.table.table-striped.w-100
      tr 
        th 交易哈希
      tr(v-for="tx in block.transactions", v-if="block.transactions")
        td
          a(v-bind:href="'/tx/' +tx") {{ tx }}

  script.
    var app = new Vue({
      el: '#app',
      data: {
        number:  '#{number}',
        confirmations: null,
        block: {
          number:null,
          timestamp:null,
          transactions: [],
          extraData: "",
          size: 0
        }
      },
      created: function() {
        getBlockInfo(this.number);
      }
    });

    function getBlockNumber() {
      return new Promise((res, rej) => {
        web3.gdtu.getBlockNumber((error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getBlock(hashStringOrBlockNumber) {
      return new Promise((res, rej) => {
        web3.gdtu.getBlock(hashStringOrBlockNumber, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getBlockTransactionCount(hashStringOrBlockNumber) {
      return new Promise((res, rej) => {
        web3.gdtu.getBlockTransactionCount(hashStringOrBlockNumber, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    async function getBlockInfo(number) {

      // var latestBlockNumber = await getBlockNumber();

      var block = await getBlock(number); //or "latest"
      block.difficulty = block.difficulty.toString(10);
      block.totalDifficulty = block.totalDifficulty.toString(10);
      app.block  = block; 

      var blockNumber  = block.number;
      var confirm;
      if( blockNumber ) {
        var latestBlockNumber = await getBlockNumber();
        if( blockNumber !== 0 && blockNumber !== latestBlockNumber ) 
          confirm = (latestBlockNumber - blockNumber) + " Confirmations";
      }
      app.confirmations = confirm || 'Unconfirmed';

      //- var blockTransactionCount = await getBlockTransactionCount(result.number);
      //- console.log('blockTransactionCount: ', blockTransactionCount);

      //- web3.gdtu.getTransactionFromBlock(hashStringOrBlockNumber [, callback])
      //- web3.gdtu.getUncle(blockHashStringOrNumber, uncleNumber [, returnTransactionObjects] [, callback])

    }
