extends layout/default_layout

block contents
  h1=title
    span.text-muted.ml-2.sub #{address}

  div#app(v-cloak)
    div
      table.table.table-striped.table-bordered._table-sm.w-100
        thead
          tr
            th.w-25 Balance
            td
              i.fas.fa-lg.fa-spinner.fa-pulse(v-if="balance===null")
              {{ balance_gdtu || '--' }}
          tr
            th Balance(USD)
            td
              i.fas.fa-lg.fa-spinner.fa-pulse(v-if="balance_usd===null")
              {{ balance_usd || '--' }}
          tr
            th Storage
            td
              i.fas.fa-lg.fa-spinner.fa-pulse(v-if="storage===null")
              {{ storage }}
          tr
            th Transaction Count
            td
              i.fas.fa-lg.fa-spinner.fa-pulse(v-if="transactionCount===null")
              {{ transactionCount }}
          tr(v-if="isContract")
            th Code
            td
              textarea(disabled, readonly, rows="6") {{ code }}

      br
      div
        h1#page-box Related transactions
          div#page
            ul
              li.page
                a(v-if="current_page > 1" v-bind:href="'/blockList/' + (current_page - 1)") prev
                a(v-if="current_page > 3" v-bind:href="'/blockList/1'") home
                a(v-bind:class="'active'" v-bind:href="'/blockList/' + current_page") {{ current_page }}
                a(v-if="current_page<last_page-3&& current_page+1 < getPage(2)" v-bind:href="'/blockList/' + (current_page + 1)") {{ current_page + 1 }}
                a(v-if="current_page<last_page-3 && current_page+2 < getPage(2)" v-bind:href="'/blockList/' + (current_page + 2)") {{ current_page + 2 }}
                span(v-if="current_page<last_page-5") ...
                a(v-if="current_page<last_page-2" v-bind:href="'/blockList/' + getPage(2)") {{ getPage(2) }}
                a(v-if="current_page<last_page-1" v-bind:href="'/blockList/' + getPage(1)") {{ getPage(1) }}
                a(v-if="current_page<last_page" v-bind:href="'/blockList/' + getPage(0)") {{ getPage(0) }}
                a(v-if="current_page < last_page - 3" v-bind:href="'/blockList/' + last_page") last
                a(v-if="current_page < last_page" v-bind:href="'/blockList/' + (current_page + 1)") next

      div#list

      table.table.table-striped._table-bordered._table-dark.w-100
        thead._thead-light
          tr
            th TxHash
            th Block
            th Value
            th From
            th To
            th Gas Used
            th Gas Price
            th Tx Fee
        tbody
          tr(v-if="txs.length === 0")
            td(colspan="8")
              div(style="text-align:center") {{ data_state }}
          tr(v-for="tx in txs", v-if="txs.length > 0")
            td
              a.d-inline-block.text-truncate(v-bind:href="'/tx/' + tx.hash", style="max-width:200px") {{ tx.hash }}
            td
              a(v-bind:href="'/block/' + Number(tx.blockNumber.replace('gd','0x')).toString(10)") {{ Number(tx.blockNumber.replace('gd','0x')).toString(10) }}
            td {{ web3.fromWei(tx.value, 'gdtuer').toString(10) + ' GDTU' }}
            td
              span(v-if="!tx.from") --
              div(v-else)
                span(v-if="address === tx.from").d-inline-block.text-truncate(v-bind:href="'/address/' + tx.from+ '/1/'", style="max-width:150px") {{ tx.from }}
                a(v-else).d-inline-block.text-truncate(v-bind:href="'/address/' + tx.from+ '/1/'", style="max-width:150px") {{ tx.from }}
            td
              span(v-if="!tx.to") --
              div(v-else)
                span(v-if="address === tx.to").d-inline-block.text-truncate(v-bind:href="'/address/' + tx.to+ '/1/'", style="max-width:150px") {{ tx.to }}
                a(v-else).d-inline-block.text-truncate(v-bind:href="'/address/' + tx.to+ '/1/'", style="max-width:150px") {{ tx.to }}
            td {{ Number(tx.gas.replace('gd','0x')).toString(10) }}
            td {{ web3.fromWei(tx.gasPrice, 'gdtuer').toString(10) + ' GDTU' }}
            td {{ web3.fromWei((tx.gas * tx.gasPrice), 'gdtuer').toString(10) + ' GDTU' }}

  script.

    var app = new Vue({
      el: '#app',
      data: {
        data_state: 'loading...',
        address: '#{address}',
        balance: null,
        balance_gdtu: null,
        balance_usd: null,
        storage: null,
        code: null,
        transactionCount: null,
        current_page: #{ current_page } || 1,
        size : 10,
        last_page: 1,
        txs: []
      },
      computed: {
        isContract: function() {
          return (this.code && this.code.length > 3);
        }
      },
      created: function () {
        getAddressInfo.bind(this)();
        init.bind(this)();
      }
    });


    // init Function
    async function init() {
      var self = app || this;
      var result = await getTransactions(self)
      self.txs = result.list;
      if(result.list.length<1) self.data_state = 'no related transactions'
      self.last_page = Math.ceil(result.total / result.page_size);
    }

    function getBalance(address) {
      return new Promise((res, rej) => {
        web3.gdtu.getBalance(address, (error, result) => {
          if(error) rej(error);
          else res(result.toString(10));
        });
      });
    }

    function getStorageAt(address) {
      return new Promise((res, rej) => {
        web3.gdtu.getStorageAt(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getCode(address) {
      return new Promise((res, rej) => {
        web3.gdtu.getCode(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getTransactionCount(address) {
      return new Promise((res, rej) => {
        web3.gdtu.getTransactionCount(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }


    function getGDTUUSD(balance) {
      return new Promise((res, rej) => {
        $.getJSON("https://api.coinmarketcap.com/v1/ticker/orange/", function(json) {
          var price = Number(json[0].price_usd);
          var gdtuusd = price.toFixed(2);
          var balanceusd = "$ " + (gdtuusd * balance);
          res(balanceusd);
        });
      });
    }

    async function getAddressInfo(address) {
      var self = app || this;
      address = address || self.address;

      self.balance = await getBalance(address);
      console.log("self.balance=",self.balance);
      self.balance_gdtu = web3.fromWei(app.balance, 'gdtuer').toString(10) + ' GDTU';
      console.log("self.balance_gdtu=",self.balance_gdtu);

      self.storage = await getStorageAt(address);
      self.code = await getCode(address);
      //- if( self.code.length > 3) self.isContract
      //- console.log('code: ', JSON.stringify(self.code, '', 2));

      self.transactionCount = await getTransactionCount(address);

      self.balance_usd = await getGDTUUSD(web3.fromWei(app.balance, 'gdtuer'));
    }

    async function getTransactions(self) {
      return new Promise((res, rej) => {
        $.ajax({
          url: "#{env.GDTU_RPC_URL}/api/v1/transactions/list",
          type: "POST",
          data: {
            "page_no": self.current_page,
            "page_size": self.size,
            "address": self.address
          },
          success: function (data) {
            let result = data.data;
            res(result);
          },
          fail: function (err) {
            console.log(err);
            rej(err);
          }
        });
      });
    }

    function getPage(n) {
      let self = app || this;
      return self.current_page < (self.last_page - 10 - n) ? (self.current_page + 10 + 2 - n) : (self.last_page - n);
    }
